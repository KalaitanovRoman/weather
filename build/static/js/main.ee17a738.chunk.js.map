{"version":3,"sources":["components/weather/Weather-block.jsx","components/weather/Weather-list.jsx","components/error/Error.jsx","components/search/Search.jsx","serviceWorker.js","index.js","App.js"],"names":["WeatherBlock","this","props","date","wind","main","weather","dateFormatter","Date","toLocaleDateString","imgURL2","id","className","Math","floor","temp","humidity","feels_like","Component","WeatherList","list","map","item","key","dt","getTime","clouds","all","dt_txt","speed","Error","city","Search","state","value","location","pathname","slice","error","items","cityInfo","app_id","handleChange","event","setState","target","handleSubmit","preventDefault","fetchData","history","push","toLocaleLowerCase","cityName","fetch","then","res","json","resp","dailyData","filter","includes","catch","onSubmit","type","onChange","placeholder","withRouter","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee17a738.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class WeatherBlock extends Component {\r\n    render() {\r\n        const {\r\n            date,\r\n            wind,\r\n            main,\r\n            weather\r\n        } = this.props;\r\n        const dateFormatter = new Date(date).toLocaleDateString();\r\n        const imgURL2 = `weather-block-icon owf owf-${weather[0].id} owf-3x icon-style`;\r\n\r\n        return (\r\n            <div className=\"weather-block\">\r\n                <div className=\"weather-block-header\">\r\n                    <i className={imgURL2}></i>\r\n                    <span className=\"weather-block-temperature\">{Math.floor(main.temp)}℃</span>\r\n                    <span className=\"weather-block-date\">{dateFormatter}</span>\r\n                </div>\r\n                <div className=\"weather-block-body\">\r\n                    <div className=\"weather-block-content\">\r\n                        <p>Humidity:</p>\r\n                        <span>{main.humidity}%</span>\r\n                    </div>\r\n                    <div className=\"weather-block-content\">\r\n                        <p>Feels like:</p>\r\n                        <span>{Math.floor(main.feels_like)}℃</span>\r\n                    </div>\r\n                    <div className=\"weather-block-content\">\r\n                        <p>Wind speed:</p>\r\n                        <span>{Math.floor(wind)} km/h</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { WeatherBlock } from \"./Weather-block\";\r\nimport './weather.scss'\r\n\r\nexport class WeatherList extends Component {\r\n    render() {\r\n        const {\r\n            list,\r\n        } = this.props;\r\n\r\n        return (\r\n            <section className=\"weather-wrapper\">\r\n                <div className=\"weather-list\">\r\n                    {list.map(item => (\r\n                        <WeatherBlock\r\n                            key={item.dt + new Date().getTime()}\r\n                            main={item.main}\r\n                            weather={item.weather}\r\n                            clouds={item.clouds.all}\r\n                            date={item.dt_txt}\r\n                            wind={item.wind.speed}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './error.scss'\r\n\r\nexport class Error extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"error-page\">\r\n                <h2>RRRR... \"{this.props.city}\" not found</h2>\r\n                <i className=\"error-dinosaur\"></i>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { WeatherList } from \"../weather/Weather-list\";\r\nimport { Error } from \"../error/Error\";\r\nimport './form.scss'\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        value: this.props.location.pathname.slice(1) ? this.props.location.pathname.slice(1) : '',\r\n        error: false,\r\n        items: [],\r\n        cityInfo: '',\r\n        app_id: '0665459a6122953fcc0607ffa2a745bb'\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.location.pathname.slice(1)) {\r\n            this.fetchData();\r\n        }\r\n    }\r\n\r\n    fetchData() {\r\n        const cityName = this.state.value;\r\n\r\n        fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&APPID=${this.state.app_id}`)\r\n            .then(res => res.json())\r\n            .then((resp) => {\r\n                const dailyData = resp.list.filter(item => item.dt_txt.includes(\"15:00:00\"));\r\n\r\n                this.setState({\r\n                    items: dailyData,\r\n                    cityInfo: resp.city,\r\n                    error: false\r\n                });\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    error\r\n                });\r\n\r\n                throw new Error(`Error: ${error}`)\r\n            })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({value: event.target.value});\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (this.state.value === '') {\r\n            return;\r\n        }\r\n\r\n        this.fetchData();\r\n\r\n        this.props.history.push(`/${(this.state.value).toLocaleLowerCase()}`);\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            error,\r\n            items,\r\n        } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <section>\r\n                    <header>\r\n                        <h1>Check the weather in your city</h1>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={this.state.value}\r\n                                onChange={this.handleChange}\r\n                                placeholder=\"Choose a city\"\r\n                            />\r\n                            <button type=\"submit\">Send</button>\r\n                        </form>\r\n                    </header>\r\n                </section>\r\n                {error ? <Error city={this.state.value} /> : <WeatherList list={items} />}\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Search);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render((\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    ), document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport Search from './components/search/Search.jsx'\r\n\r\nexport const App = () => {\r\n  return (\r\n      <>\r\n          <Search />\r\n      </>\r\n  );\r\n};\r\n"],"sourceRoot":""}